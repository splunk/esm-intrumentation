"use strict";
/*
 * Copyright Splunk Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = require("@opentelemetry/api");
const utils_1 = require("./utils");
const metrics_1 = require("./metrics");
const profiling_1 = require("./profiling");
const tracing_1 = require("./tracing");
const logging_1 = require("./logging");
function boot() {
    const logLevel = (0, utils_1.parseLogLevel)((0, utils_1.getNonEmptyEnvVar)('OTEL_LOG_LEVEL'));
    if (logLevel !== api_1.DiagLogLevel.NONE) {
        api_1.diag.setLogger(new api_1.DiagConsoleLogger(), logLevel);
    }
    if ((0, utils_1.getNonEmptyEnvVar)('SPLUNK_AUTOINSTRUMENT_PACKAGE_NAMES') !== undefined) {
        const limitToPackages = (0, utils_1.getEnvArray)('SPLUNK_AUTOINSTRUMENT_PACKAGE_NAMES', []);
        if (!limitToPackages.includes((0, utils_1.defaultServiceName)())) {
            return;
        }
    }
    if ((0, utils_1.getEnvBoolean)('SPLUNK_PROFILER_ENABLED', false)) {
        (0, profiling_1.startProfiling)();
    }
    (0, tracing_1.startTracing)();
    if ((0, utils_1.getEnvBoolean)('SPLUNK_AUTOMATIC_LOG_COLLECTION', false)) {
        (0, logging_1.startLogging)();
    }
    if ((0, utils_1.getEnvBoolean)('SPLUNK_METRICS_ENABLED', false) ||
        (0, utils_1.getEnvBoolean)('SPLUNK_PROFILER_MEMORY_ENABLED', false)) {
        (0, metrics_1.startMetrics)();
    }
}
boot();
//# sourceMappingURL=instrument.js.map