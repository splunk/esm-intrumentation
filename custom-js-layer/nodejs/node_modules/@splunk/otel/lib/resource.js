"use strict";
/*
 * Copyright Splunk Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.detect = void 0;
const api_1 = require("@opentelemetry/api");
const resources_1 = require("@opentelemetry/resources");
const DistroDetector_1 = require("./detectors/DistroDetector");
const DockerCGroupV1Detector_1 = require("./detectors/DockerCGroupV1Detector");
const EnvDetector_1 = require("./detectors/EnvDetector");
const HostDetector_1 = require("./detectors/HostDetector");
const OSDetector_1 = require("./detectors/OSDetector");
const ProcessDetector_1 = require("./detectors/ProcessDetector");
const detectors = [
    DistroDetector_1.distroDetector,
    DockerCGroupV1Detector_1.dockerCGroupV1Detector,
    EnvDetector_1.envDetector,
    HostDetector_1.hostDetector,
    OSDetector_1.osDetector,
    ProcessDetector_1.processDetector,
];
const detect = () => {
    return detectors
        .map((detector) => {
        try {
            return detector.detect();
        }
        catch (e) {
            api_1.diag.error(`${detector.constructor.name} failed:`, e);
            return resources_1.Resource.empty();
        }
    })
        .reduce((acc, resource) => {
        return acc.merge(resource);
    }, resources_1.Resource.empty());
};
exports.detect = detect;
//# sourceMappingURL=resource.js.map